        ; ********************************
        ; * U0 area for data and program *
        ; ********************************
RAM_FUNCTIONS_STORAGE:	
        phase RAM_FUNCTIONS
ROM_RETURN_ADDRESS      dw      0           ; Return address for 2.x ROM 
CURRENT_PAGE_INDEX      db      0           ; Used page index 0..3
CURRENT_FILE_LENGTH     dw      0           ; Remaining length of the currently opened file
CURRENT_FILE_ADDRESS    dw      0           ; Address of the currently opened file
CURRENT_CAS_HEADER_POS  db      0           ; Position in CAS header (for CH_IN function)

        ; CAS header struct
CAS_HEADER  CASHeader

        ; ***********************
        ; * Initialization code *
        ; ***********************

        ;---------------------------------------------------------------------
        ; BASIC initialization and version detection program

BASIC_INITIALIZE:        
        ; Set memory map to: U0, U1, U2, SYS
	ld	a, P_U0_U1_U2_SYS
        ld      (P_SAVE), a
        out     (PAGE_REG), a
		
	; determine ROM version (1.x or 2.x)
	ld 	a, (VERSION)                  ; Check for 1.x verion number
	or      a                             ; version is 0 for 1.x ROM
	jr 	nz, BASIC_INITIALIZE_END      ; Version is 2.x -> no more action
		
	; version is 1.x
	; initialize BASIC storage area
	ld	hl, BASIC_STORAGE_AREA
	push 	hl
	pop	ix
	ld	bc, $02ef
	ld	de, $1701
	ld	(hl), 0
	ldir
		
	; initialize error handlers
	ld	hl, $0fb5b
	ld 	de, 8
	ld	bc, $27
	ldir
		
	; call NEW command
	call	0de10h

BASIC_INITIALIZE_END:	
	; Set memory map to: U0, U1, U2, CART
	ld	a, P_U0_U1_U2_CART
        ld      (P_SAVE), a
        out     (PAGE_REG), a
		
	; return back to the CART
	ret

        ; **********************
        ; * RAM File Functions *
        ; **********************

        ;---------------------------------------------------------------------
        ; Copies TVC program file from Cart ROM to RAM
        ; Input:  HL - ROM address
        ;         DE - RAM address
        ;         BC - Number of bytes to copy
        ; Output: HL - last byte address of ROM file
        ;         DE - last address of the RAM
        ; Destroys: HL, BC, DE, A, F
COPY_PROGRAM_TO_RAM:
        ; Check length
        ld      a, b
        or      a, c
        ret     z                               ; Return if length is zero

	; Set memory map to: U0, U1, U2, CART
	ld	a, P_U0_U1_U2_CART
        ld      (P_SAVE), a
        out     (PAGE_REG), a

        ; determine ROM page index
        ld      a, h
        srl     a                               ; Divide by 64 (for the page address)
        srl     a
        srl     a
        srl     a
        srl     a
        srl     a

        ld      (CURRENT_PAGE_INDEX), a

        ; set page index
        call    CHANGE_ROM_PAGE

        ; convert ROM address to CART address
        ld      a, high(CART_START_ADDRESS)
        or      h
        ld      h, a

        if DECOMPRESSOR_ENABLED == 0
        call    NONCOMPRESSED_COPY
        else
        call    COMPRESSED_COPY
        endif

END_PROGRAM_COPY:
        ld      a, (PAGE0_SELECT)               ; Select PAGE0
        ret     

        ;---------------------------------------------------------------------
        ; Copies bytes without decompressing
        ; Input:  HL - Source address
        ;         DE - Destination address
        ;         BC - Number of bytes to copy
        if DECOMPRESSOR_ENABLED == 0
NONCOMPRESSED_COPY:
PROGRAM_COPY_LOOP:
        ldi                                     ; copy byte

        ; check remaining bytes
        ret      po                             ; return if no more bytes left

        ; check for page switch
        ld      a, h
        cp      high(PAGE0_SELECT)
        jr      c, PROGRAM_COPY_LOOP

        ld      a,  l
        cp      low(PAGE0_SELECT)
        jr      c, PROGRAM_COPY_LOOP

        ; page end reached -> switch page
        ld      a, (CURRENT_PAGE_INDEX)
        inc     a
        ld      (CURRENT_PAGE_INDEX), a

        call    CHANGE_ROM_PAGE

        ; update page ROM address
        ld      hl, PAGE_DATA_START_ADDRESS

        jr      PROGRAM_COPY_LOOP

        endif

	if DECOMPRESSOR_ENABLED != 0
; -----------------------------------------------------------------------------
; ZX7 decoder by Einar Saukas, Antonio Villena & Metalbrain
; "Standard" version (69 bytes only)
; -----------------------------------------------------------------------------
; Parameters:
;   HL: source address (compressed data)
;   DE: destination address (decompressing)
; -----------------------------------------------------------------------------
COMPRESSED_COPY:
dzx7_standard:
        ld      a, $80
dzx7s_copy_byte_loop:
        ldi                             ; copy literal byte
        call    UPDATE_SOURCE_ADDRESS

dzx7s_main_loop:
        call    dzx7s_next_bit
        jr      nc, dzx7s_copy_byte_loop ; next bit indicates either literal or sequence

; determine number of bits used for length (Elias gamma coding)
        push    de
        ld      bc, 0
        ld      d, b
dzx7s_len_size_loop:
        inc     d
        call    dzx7s_next_bit
        jr      nc, dzx7s_len_size_loop

; determine length
dzx7s_len_value_loop:
        call    nc, dzx7s_next_bit
        rl      c
        rl      b
        jr      c, dzx7s_exit           ; check end marker
        dec     d
        jr      nz, dzx7s_len_value_loop
        inc     bc                      ; adjust length

; determine offset
        ld      e, (hl)                 ; load offset flag (1 bit) + offset value (7 bits)
        inc     hl
        call    UPDATE_SOURCE_ADDRESS   
	scf
	rl	e
        jr      nc, dzx7s_offset_end    ; if offset flag is set, load 4 extra bits
        ld      d, $10                  ; bit marker to load 4 bits

dzx7s_rld_next_bit:
        call    dzx7s_next_bit
        rl      d                       ; insert next bit into D
        jr      nc, dzx7s_rld_next_bit  ; repeat 4 times, until bit marker is out
        inc     d                       ; add 128 to DE
        srl	d							; retrieve fourth bit from D
dzx7s_offset_end:
        rr      e                       ; insert fourth bit into E

; copy previous sequence
        ex      (sp), hl                ; store source, restore destination
        push    hl                      ; store destination
        sbc     hl, de                  ; HL = destination - offset - 1
        pop     de                      ; DE = destination
        ldir
dzx7s_exit:
        pop     hl                      ; restore source address (compressed data)
        jr      nc, dzx7s_main_loop

dzx7s_next_bit:
        add     a, a                    ; check next bit
        ret     nz                      ; no more bits left?
	
        ld      a, (hl)                 ; load another group of 8 bits
        inc     hl
        call    UPDATE_SOURCE_ADDRESS
        rla
        ret

UPDATE_SOURCE_ADDRESS:
        push    af

        ; check for page switch
        ld      a, h
        cp      high(PAGE0_SELECT)
        jr      c, UPDATE_SOURCE_ADDRESS_RETURN

        ld      a,  l
        cp      low(PAGE0_SELECT)
        jr      c, UPDATE_SOURCE_ADDRESS_RETURN

        ; page end reached -> switch page
        ld      a, (CURRENT_PAGE_INDEX)
        inc     a
        ld      (CURRENT_PAGE_INDEX), a

        call    CHANGE_ROM_PAGE

        ; update page ROM address
        ld      hl, PAGE_DATA_START_ADDRESS

UPDATE_SOURCE_ADDRESS_RETURN:
        pop     af
        ret 

	endif   
               
        ;---------------------------------------------------------------------
        ; Changes ROM page according current page index (CURRENT_PAGE_INDEX) variable
CHANGE_ROM_PAGE:
        push    hl                              ; Save ROM address
        push    af
        ld      a, (CURRENT_PAGE_INDEX)
        ld      hl, PAGE0_SELECT
        or      l
        ld      l, a
        ld      a, (hl)                         ; Change page
        pop     af
        pop     hl
        ret

        ;---------------------------------------------------------------------
        ; Starts Basic program for 1.x ROM
BASIC_RUN_1x:
        ; Set memory map to: U0, U1, U2, SYS
	ld	a, P_U0_U1_U2_SYS
        ld      (P_SAVE), a
        out     (PAGE_REG), a
		
	; enable interrupts
	ei
		
	; execute RUN command
	ld	hl, ($1722)
	jp	$de23

RAM_FUNCTIONS_CODE_LENGTH: equ $-RAM_FUNCTIONS
	dephase

        ; ************************
        ; * System function call *
        ; ************************

SYSTEM_FUNCTION_CALLER_STORAGE:
        phase SYSTEM_FUNCTION_CALLER

        ; *** System function caller
        ex      (sp),hl                     ; Get return address
        ld      a,(hl)                      ; Get function code
        inc     hl                          ; Increment return address
        ex      (sp),hl                     ; Store return address
        ex      af,af'                      ; Save fuction code to AF'
        push    af                          ; and store original AF' to stack

        ld      a,(P_SAVE)                  ; Save memory pageing settings
        push    af                          ; to stack

        ld      A,P_U0_U1_U2_CART           ; Set paging to U0-U1-U2-CART
        ld      (P_SAVE),a
        out     (PAGE_REG),a

        jp      SYSTEM_FUNCTION             ; Call New System Function

SYSTEM_FUNCTION_RETURN:
        ex      af,af'
        pop     af

        ld      (P_SAVE),a                  ; Restore paging
        out     (PAGE_REG),a
        pop     af
        ex      af,af'
        ret

SYSTEM_FUNCTION_CALLER_CODE_LENGTH equ $-SYSTEM_FUNCTION_CALLER
        dephase

        ; ************************
        ; * System function pass *
        ; ************************

SYSTEM_FUNCTION_PASS_STORAGE:
        phase SYSTEM_FUNCTION_PASS

        ;---------------------------------------------------------------------
        ; Passing System Function call to ROM
        ld      a,P_U0_U1_U2_SYS            ; Page in ROM
        ld      (P_SAVE),a
        out     (PAGE_REG),a

SYSTEM_FUNCTION_CHAIN_ADDRESS:
        jp      0                           ; Jump to ROM (address will be updated when code is copied to RAM)

SYSTEM_FUNCTION_PASS_CODE_LENGTH equ $-SYSTEM_FUNCTION_PASS
        dephase
