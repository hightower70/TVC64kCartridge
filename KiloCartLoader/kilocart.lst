# file opened: kilocart.a80
  1   0000                      .include "definitions.a80"
# file opened: definitions.a80
  1+  0000
  2+  0000              ; Cartridge start memory address
  3+  0000              CART_START_ADDRESS      equ $C000
  4+  0000              PAGE_DATA_START_ADDRESS equ $c007
  5+  0000
  6+  0000              ; System memory definitions
  7+  0000              P_SAVE                  equ $0003
  8+  0000              FILE_TYPE               equ $0bf3
  9+  0000              BASIC_STORAGE_AREA      equ $1700
 10+  0000              BASIC_PROGRAM_START     equ $19EF
 11+  0000              BASIC_FLAG	        equ $0EB6
 12+  0000              BUFFER                  equ $0b6b
 13+  0000
 14+  0000              ; RAM (U0) addresses
 15+  0000              RAM_DATA          equ $0c05
 16+  0000              RAM_PROGRAM       equ $0c05 + RAM_DATA_LENGTH
 17+  0000
 18+  0000              ; System call code addresses
 19+  0000              SYSTEM_FUNCTION_CALLER                  EQU $0B23
 20+  0000              SYSTEM_FUNCTION_ROM_ENTRY_ADDRESS       EQU $0B35
 21+  0000
 22+  0000              ; Paging addresses
 23+  0000              PAGE0_SELECT   equ $fffc
 24+  0000              PAGE1_SELECT   equ $fffd
 25+  0000              PAGE2_SELECT   equ $fffe
 26+  0000              PAGE3_SELECT   equ $ffff
 27+  0000
 28+  0000              ; KiloCart constants
 29+  0000              CART_MAX_FILENAME_LENGTH equ     16
 30+  0000
 31+  0000              ; System types
 32+  0000              BUFFERED_FILE   equ $11
 33+  0000
 34+  0000              ; System function codes and masks
 35+  0000              SYSTEM_FUNCTION_CLASS_MASK              equ $70
 36+  0000              SYSTEM_FUNCTION_DIRECTION_MASK          equ $80
 37+  0000              CAS_FUNCTION_CLASS                      equ $50
 38+  0000              CAS_LAST_FUNCTION_CODE                  equ $0b
 39+  0000
 40+  0000              ; Register definitions
 41+  0000              PAGE_REG        EQU $02
 42+  0000
 43+  0000              ; Memory pageing constants
 44+  0000              P_U0_U1_U2_SYS   EQU $70
 45+  0000              P_U0_U1_U2_CART  EQU $30
 46+  0000              P_SYS_U1_U2_CART EQU $20
 47+  0000
 48+  0000              ; Version numbers
 49+  0000              SW_MAJOR_VERSION EQU 0
 50+  0000              SW_MINOR_VERSION EQU 1
 51+  0000
 52+  0000              ; Casette functions
 53+  0000              CAS_FN_CHIN     EQU $D1
 54+  0000              CAS_FN_CHOUT    EQU $51
 55+  0000              CAS_FN_BKIN     EQU $D2
 56+  0000              CAS_FN_BKOUT    EQU $52
 57+  0000              CAS_FN_OPEN     EQU $D3
 58+  0000              CAS_FN_CRTE     EQU $53
 59+  0000              CAS_FN_CLOSE_RD EQU $D4
 60+  0000              CAS_FN_CLOSE_WR EQU $54
 61+  0000              CAS_FN_VERIFY   EQU $D5
 62+  0000
 63+  0000              ; Casette function error codes
 64+  0000              CAS_ERR_EOF             EQU $EC
 65+  0000              CAS_ERR_ALREADY_OPENED  EQU $EB
 66+  0000              CAS_ERR_CRC             EQU $EA
 67+  0000              CAS_ERR_NO_OPEN_FILE    EQU $E9
 68+  0000              CAS_ERR_VERIFY          EQU $E8
 69+  0000              CAS_ERR_INTERNAL        EQU $E7
 70+  0000              CAS_ERR_PROTECTION      EQU $E6
 71+  0000              CAS_ERR_BLOCK_NUMBER    EQU $E5
 72+  0000
 73+  0000
 74+  0000              ; File system struct
 75+  0000                      struct FileSystemStruct
 76+  0000 ~            FILES1x_COUNT       db 0                    ; Number of files in the image for 1.x TVC ROM version
 77+  0000 ~            FILES2x_COUNT       db 0                    ; Number of files in the image for 2.x TVC ROM version
 78+  0000 ~            DIRECTORY1x_ADDRESS dw 0                    ; Address of the directory for 1.x TVC ROM version
 79+  0000 ~            DIRECTORY2x_ADDRESS dw 0	            ; Address of the directory for 1.x TVC ROM version
 80+  0000 ~            FILES_ADDRESS       dw 0	            ; Address of the file data
 81+  0000                      ends
 82+  0000
 83+  0000              ; File system entry
 84+  0000                      struct FileSystemEntry
 85+  0000 ~            FILE_NAME       ds CART_MAX_FILENAME_LENGTH, 0
 86+  0000 ~            FILE_ADDRESS    dw 0
 87+  0000 ~            FILE_LENGTH     DW 0
 88+  0000                      ends
 89+  0000
 90+  0000              ; CAS header struct
 91+  0000                      struct CASHeader
 92+  0000 ~            Zero            db 0    ; 0
 93+  0000 ~            FileType        db 1    ; Program type: 0x01 - Program file, 0x00 - ASCII file
 94+  0000 ~            FileLength      dw 0    ; Length of the file
 95+  0000 ~            Autorun         db $ff  ; Autostart: 0xff, no autostart: 0x00
 96+  0000 ~            Zeros           ds 10, 0; Zero
 97+  0000 ~            Version         db      ; Version
 98+  0000                      ends
# file closed: definitions.a80
  2   0000
  3   0000                      org     CART_START_ADDRESS
  4   C000 4D 4F 50 53          db      "MOPS"
  5   C004
  6   C004                      ;---------------------------------------------------------------------
  7   C004                      ; Main program entry point. Intializes cart program
  8   C004              ENTRY:
  9   C004 3A FC FF             ld      a, (PAGE0_SELECT)               ; Change to Page0
 10   C007 C3 0C C0             jp      MAIN                            ; Jump to initialization
 11   C00A 00                   db      SW_MAJOR_VERSION                ; Major version number
 12   C00B 01                   db      SW_MINOR_VERSION                ; Minor version number
 13   C00C
 14   C00C                      ; Initialize cart program
 15   C00C              MAIN:
 16   C00C                      ; Set memory map to: U0, U1, U2, CART
 17   C00C 3E 30                ld      a, P_U0_U1_U2_CART
 18   C00E 32 03 00             ld      (P_SAVE), a
 19   C011 D3 02                out     (PAGE_REG), a
 20   C013
 21   C013 D5                   push    de                              ; save returning address for 2.x ROM
 22   C014
 23   C014                      ; Copy RAM data
 24   C014 21 90 C1             ld      hl, RAM_DATA_STORAGE
 25   C017 11 05 0C             ld      de, RAM_DATA
 26   C01A 01 2B 00             ld      bc, RAM_DATA_LENGTH
 27   C01D ED B0                ldir
 28   C01F
 29   C01F                      ; calculate returning address for 2.x ROM
 30   C01F E1                   pop     hl                              ; restore returning address
 31   C020 11 EA FF     	ld	de, -22
 32   C023 19           	add     hl, de
 33   C024 22 06 0C     	ld      (ROM_RETURN_ADDRESS), hl
 34   C027
 35   C027                      ; Copy BASINIT program to the RAM
 36   C027 21 BB C1             ld	hl, BASIC_INITIALIZE_CODE
 37   C02A 11 30 0C     	ld	de, RAM_PROGRAM
 38   C02D 01 39 00     	ld	bc, BASIC_INITIALIZE_CODE_LENGTH
 39   C030 ED B0        	ldir
 40   C032
 41   C032              	; call BASIC area initialize and version detection
 42   C032 CD 30 0C     	call	BASIC_INITIALIZE
 43   C035
 44   C035                      ; Copy RAM code
 45   C035 21 F4 C1             ld      hl, RAM_FUNCTIONS_CODE
 46   C038 11 30 0C             ld      de, RAM_PROGRAM
 47   C03B 01 67 00             ld      bc, RAM_FUNCTIONS_CODE_LENGTH
 48   C03E ED B0                ldir
 49   C040
 50   C040                      ; *** Chain system function call
 51   C040
 52   C040                      ; Copy ROM entry address of the system function call
 53   C040 2A 35 0B             ld      HL, (SYSTEM_FUNCTION_ROM_ENTRY_ADDRESS)
 54   C043 22 95 0C             ld      (SYSTEM_FUNCTION_CHAIN_ADDRESS+1), HL
 55   C046
 56   C046                      ; Overwrite original system call code
 57   C046 21 5B C2             ld      HL, SYSTEM_FUNCTION_CALLER_CODE
 58   C049 11 23 0B             ld      DE, SYSTEM_FUNCTION_CALLER
 59   C04C 01 1E 00             ld      BC, SYSTEM_FUNCTION_CALLER_CODE_LENGTH
 60   C04F ED B0                ldir
 61   C051
 62   C051                      ; *** Load and Start the first program from the ROM filesystem ***
 63   C051 CD 88 C0             call    GET_FILE_SYSTEM_INFO
 64   C054
 65   C054 11 10 00             ld      de, CART_MAX_FILENAME_LENGTH    ; Skip filename
 66   C057 19                   add     hl, de
 67   C058 5E                   ld      e,  (hl)                        ; Load address
 68   C059 23                   inc     hl
 69   C05A 56                   ld      d,  (hl)
 70   C05B 23                   inc     hl
 71   C05C 4E                   ld      c,  (hl)                        ; Load length
 72   C05D 23                   inc     hl
 73   C05E 46                   ld      b,  (hl)
 74   C05F
 75   C05F 6B                   ld      l, e
 76   C060 62                   ld      h, d
 77   C061 11 EF 19     	ld	de, BASIC_PROGRAM_START
 78   C064
 79   C064 CD 30 0C     	call    COPY_PROGRAM_TO_RAM
 80   C067
 81   C067              	; setup BASIC program location
 82   C067 21 EF 19             ld	hl, BASIC_PROGRAM_START
 83   C06A 22 20 17     	ld	(1720h), hl
 84   C06D 22 22 17     	ld	(1722h), hl
 85   C070
 86   C070              	; Start program
 87   C070 3A 05 0C     	ld	a,(BASIC_VERSION)
 88   C073 FE 01        	cp	1
 89   C075 CA 7F 0C     	jp	z, BASIC_RUN
 90   C078
 91   C078                      ; Start program routine for 2.x version rom
 92   C078                      ; set BASIC flag to no start screen, no prompt, no new command and autostart
 93   C078 3E 0F                ld	a, 0fh
 94   C07A 32 B6 0E             ld	(BASIC_FLAG), a
 95   C07D
 96   C07D              	; load return address
 97   C07D 2A 06 0C     	ld	hl,(ROM_RETURN_ADDRESS)
 98   C080
 99   C080              	; Set memory map to: SYS, U1, U2, CART
100   C080 3E 20        	ld	a, P_SYS_U1_U2_CART
101   C082 32 03 00             ld      (P_SAVE), A
102   C085 D3 02                out     (PAGE_REG), A
103   C087
104   C087              	; return back to ROM
105   C087 E9           	jp	(hl)
106   C088
107   C088                      ;------------------------------------
108   C088                      ; Load file system area area address
109   C088                      ; Input: -
110   C088                      ; Output: HL - File system area address depending on the basic version
111   C088                      ;          A - Number of files in the file system
112   C088                      ; Destroys: A, F
113   C088              GET_FILE_SYSTEM_INFO:
114   C088 3A 05 0C             ld      a, (BASIC_VERSION)
115   C08B FE 01                cp      a, 1
116   C08D 28 0B                jr      z, SET_VERSION1x_FILE_SYSTEM
117   C08F
118   C08F 2A 7D C2             ld      hl, (FILE_SYSTEM.DIRECTORY2x_ADDRESS)       ; File system for 2.x ROM
119   C092
120   C092 3E C0                ld      a, high(CART_START_ADDRESS)                 ; Convert ROM address to CART address
121   C094 B4                   or      h
122   C095 67                   ld      h, a
123   C096
124   C096 3A 7A C2             ld      a, (FILE_SYSTEM.FILES2x_COUNT)              ; Get file count
125   C099 C9                   ret
126   C09A
127   C09A              SET_VERSION1x_FILE_SYSTEM:
128   C09A 2A 7B C2             ld      hl, (FILE_SYSTEM.DIRECTORY1x_ADDRESS)       ; File system for 1.x ROM
129   C09D
130   C09D 3E C0                ld      a, high(CART_START_ADDRESS)                 ; Convert ROM address to CART address
131   C09F B4                   or      h
132   C0A0 67                   ld      h, a
133   C0A1
134   C0A1 3A 79 C2             ld      a, (FILE_SYSTEM.FILES1x_COUNT)              ; Get file count
135   C0A4 C9                   ret
136   C0A5
137   C0A5                     ;---------------------------------------------------------------------
138   C0A5                     ; System function handler
139   C0A5              SYSTEM_FUNCTION:
140   C0A5 08                   ex      af,af'                      ; Get function code to AF
141   C0A6 F5                   push    af                          ; Save it on stack
142   C0A7
143   C0A7 E6 70                and     SYSTEM_FUNCTION_CLASS_MASK  ; Check if it is cassette class
144   C0A9 FE 50                cp      CAS_FUNCTION_CLASS
145   C0AB CA B3 C0             jp      z, HANDLE_CAS_FUNCTIONS
146   C0AE
147   C0AE F1                   pop     af                          ; Not cassette function, restore function code
148   C0AF
149   C0AF              NOT_KNOWN_CAS_FUNCTION:
150   C0AF 08                   ex      af,af'                      ; Restore function code to AF'
151   C0B0 C3 8D 0C             jp      SYSTEM_FUNCTON_PASS         ; and continus with the original ROM routine
152   C0B3
153   C0B3              HANDLE_CAS_FUNCTIONS:
154   C0B3 F1                   pop     af                          ; Restore function code
155   C0B4 E5                   push    hl                          ; Save HL
156   C0B5
157   C0B5                      ; Determine CAS function
158   C0B5 FE D3                cp      a, CAS_FN_OPEN
159   C0B7 CA CD C0             jp      z, CAS_OPEN
160   C0BA
161   C0BA FE D1                cp      a, CAS_FN_CHIN
162   C0BC CA 38 C1             jp      z, CAS_CH_IN
163   C0BF
164   C0BF FE D2                cp      a, CAS_FN_BKIN
165   C0C1 CA 58 C1             jp      z, CAS_BKIN
166   C0C4
167   C0C4 FE D4                cp      a, CAS_FN_CLOSE_RD
168   C0C6 CA 75 C1             jp      z, CAS_CLOSE_RD
169   C0C9
170   C0C9 E1                   pop     hl                          ; Restore HL
171   C0CA C3 AF C0             jp      NOT_KNOWN_CAS_FUNCTION
172   C0CD
173   C0CD                      ;*********************************************************************
174   C0CD                      ;* Cassette Functions
175   C0CD                      ;*********************************************************************
176   C0CD
177   C0CD                      ;---------------------------------------------------------------------
178   C0CD                      ; Casette: Open file
179   C0CD                      ; Input:  DE - file name pointer
180   C0CD                      ; Output: A - status code
181   C0CD                      ;         DE - file name pointer
182   C0CD              CAS_OPEN:
183   C0CD 6B                   ld      l, e                        ; File name pointer
184   C0CE 62                   ld      h, d
185   C0CF
186   C0CF                      ; Convert file name to uppercase
187   C0CF 46                   ld      b,  (hl)                    ; File name length
188   C0D0 23                   inc     hl
189   C0D1
190   C0D1              FILENAME_TOUPPER_LOOP:
191   C0D1 7E                   ld      a,  (hl)                    ; load character
192   C0D2 FE 61                cp      a, 'a'
193   C0D4 38 12                jr      c, STORE_FILENAME_CHARACTER
194   C0D6 FE 7B                cp      a, 'z' + 1
195   C0D8 30 04                jr      nc, FILENAME_CHECK_ACCENTED_CHARACTERS
196   C0DA E6 DF                and     $df                         ; letter to upercase
197   C0DC 18 0A                jr      STORE_FILENAME_CHARACTER
198   C0DE
199   C0DE              FILENAME_CHECK_ACCENTED_CHARACTERS:
200   C0DE FE 90                cp      a, $90                      ; accented letters
201   C0E0 38 06                jr      c, STORE_FILENAME_CHARACTER
202   C0E2 FE 99                cp      a, $99
203   C0E4 30 02                jr      nc, STORE_FILENAME_CHARACTER
204   C0E6 D6 10                sub     a, $10
205   C0E8
206   C0E8              STORE_FILENAME_CHARACTER:
207   C0E8 77                   ld      (hl), a
208   C0E9 23                   inc     hl
209   C0EA 10 E5                djnz    FILENAME_TOUPPER_LOOP
210   C0EC
211   C0EC                      ; Find filename in the ROM file system
212   C0EC CD 88 C0             call    GET_FILE_SYSTEM_INFO         ; Get file system address and number of files
213   C0EF 4F                   ld      c, a                         ; Number of files in the file system
214   C0F0
215   C0F0              COMPARE_FILE_NAMES:
216   C0F0 D5                   push    de                           ; save file name address
217   C0F1 E5                   push    hl                           ; save file system entry address
218   C0F2
219   C0F2                      ; get file name length to B
220   C0F2 EB                   ex      hl, de
221   C0F3 46                   ld      b, (hl)
222   C0F4 23                   inc     hl
223   C0F5 EB                   ex      hl, de
224   C0F6
225   C0F6              COMPARE_FILENAME_CHARACTERS:
226   C0F6 1A                   ld      a, (de)                      ; Compare file name characters
227   C0F7 BE                   cp      (hl)
228   C0F8
229   C0F8 20 2E                jr      nz, CHECK_NEXT_FILE          ; non matching -> next file
230   C0FA
231   C0FA 23                   inc     hl
232   C0FB 13                   inc     de
233   C0FC
234   C0FC 10 F8                djnz    COMPARE_FILENAME_CHARACTERS
235   C0FE
236   C0FE                      ; file found -> get address and length
237   C0FE C1                   pop     bc                           ; Restore file system entry address
238   C0FF 21 10 00             ld      hl,  FileSystemEntry.FILE_ADDRESS
239   C102 09                   add     hl, bc
240   C103
241   C103                      ; store file address in CURRENT_FILE_ADDRESS
242   C103 7E                   ld      a, (hl)
243   C104 32 0C 0C             ld      (CURRENT_FILE_ADDRESS), a
244   C107 23                   inc     hl
245   C108 7E                   ld      a, (hl)
246   C109 32 0D 0C             ld      (CURRENT_FILE_ADDRESS+1), a
247   C10C 23                   inc     hl
248   C10D
249   C10D                      ; store file length in CURRENT_FILE_LENGTH and CAS header
250   C10D 7E                   ld      a, (hl)
251   C10E 32 0A 0C             ld      (CURRENT_FILE_LENGTH), a
252   C111 32 22 0C             ld      (CAS_HEADER.FileLength), a
253   C114 23                   inc     hl
254   C115 7E                   ld      a, (hl)
255   C116 32 0B 0C             ld      (CURRENT_FILE_LENGTH+1), a
256   C119 32 23 0C             ld      (CAS_HEADER.FileLength+1), a
257   C11C
258   C11C AF                   xor     a
259   C11D 32 0E 0C             ld      (CURRENT_CAS_HEADER_POS), a ; reset CAS header pos for CH_IN
260   C120 32 6B 0B             ld      (BUFFER), a                 ; Set non-buffered file
261   C123
262   C123 D1                   pop     de                          ; restore file name pointer
263   C124 AF                   xor     a                           ; no error
264   C125
265   C125 C3 8B C1             jp      CAS_RETURN
266   C128
267   C128              CHECK_NEXT_FILE:
268   C128 E1                   pop     hl                          ; file system entry address
269   C129 11 14 00             ld      de, FileSystemEntry         ; next entry
270   C12C 19                   add     hl, de
271   C12D
272   C12D D1                   pop     de                          ; file name pointer
273   C12E
274   C12E 0D                   dec     c
275   C12F 79                   ld      a,  c
276   C130 B7                   or      a
277   C131 20 BD                jr      nz, COMPARE_FILE_NAMES
278   C133
279   C133                      ; file not found
280   C133 3E E9                ld      a, CAS_ERR_NO_OPEN_FILE
281   C135
282   C135 C3 8B C1             jp      CAS_RETURN
283   C138
284   C138                      ;---------------------------------------------------------------------
285   C138                      ; Casette: Character input
286   C138                      ; Input: -
287   C138                      ; Output: C - character
288   C138                      ;         A - status code
289   C138              CAS_CH_IN:
290   C138 3A 0E 0C             ld      a,(CURRENT_CAS_HEADER_POS)
291   C13B FE 10                cp      CASHeader
292   C13D 30 14                jr      nc, CAS_CH_IN_EOF
293   C13F
294   C13F 21 20 0C             ld      hl, CAS_HEADER              ; Calculate CAS header address (A+CAS_HEADER)
295   C142 85                   add     a, l                        ; A = A+L
296   C143 6F                   ld      l, a                        ; L = A+L
297   C144 8C                   adc     a, h                        ; A = A+L+H+carry
298   C145 95                   sub     l                           ; A = H+carry
299   C146 67                   ld      h, a                        ; H = H+carry
300   C147
301   C147 4E                   ld      c,  (hl)                    ; Load CAS header data
302   C148
303   C148 3A 0E 0C             ld      a, (CURRENT_CAS_HEADER_POS) ; Increment CAS pointer
304   C14B 3C                   inc     a
305   C14C 32 0E 0C             ld      (CURRENT_CAS_HEADER_POS), a
306   C14F
307   C14F AF                   xor     a                           ; success
308   C150 C3 8B C1             jp      CAS_RETURN
309   C153
310   C153              CAS_CH_IN_EOF:
311   C153 3E EC                ld      a, CAS_ERR_EOF
312   C155 C3 8B C1             jp      CAS_RETURN
313   C158
314   C158                      ;---------------------------------------------------------------------
315   C158                      ; Casette: Block input
316   C158                      ; Input: DE - Buffer address
317   C158                      ;        BC - Length of the buffer
318   C158                      ; Output: A - status code
319   C158              CAS_BKIN:
320   C158 2A 0A 0C             ld      hl, (CURRENT_FILE_LENGTH)
321   C15B B7                   or      a
322   C15C ED 42                sbc     hl, bc
323   C15E 38 10                jr      c, CAS_BKIN_WRONG_SIZE
324   C160
325   C160 22 0A 0C             ld      (CURRENT_FILE_LENGTH), hl   ; Update remaining length
326   C163
327   C163 2A 0C 0C             ld      hl, (CURRENT_FILE_ADDRESS)  ; load file address
328   C166 CD 30 0C             call    COPY_PROGRAM_TO_RAM
329   C169 22 0C 0C             ld      (CURRENT_FILE_ADDRESS), hl  ; Update address
330   C16C
331   C16C AF                   xor     a                           ; Success
332   C16D C3 8B C1             jp      CAS_RETURN
333   C170
334   C170              CAS_BKIN_WRONG_SIZE:
335   C170 3E E7                ld      a, CAS_ERR_INTERNAL         ; wrong byte number
336   C172 C3 8B C1             jp      CAS_RETURN
337   C175
338   C175                      ;---------------------------------------------------------------------
339   C175                      ; Casette: Close file (read mode)
340   C175                      ; Input: -
341   C175                      ; Output: A - status code
342   C175              CAS_CLOSE_RD:
343   C175 AF                   xor     a
344   C176
345   C176                      ; reset file address
346   C176 32 0C 0C             ld      (CURRENT_FILE_ADDRESS), a
347   C179 32 0D 0C             ld      (CURRENT_FILE_ADDRESS+1), a
348   C17C
349   C17C                      ; reset file length
350   C17C 32 0A 0C             ld      (CURRENT_FILE_LENGTH), a
351   C17F 32 22 0C             ld      (CAS_HEADER.FileLength), a
352   C182 32 0B 0C             ld      (CURRENT_FILE_LENGTH+1), a
353   C185 32 23 0C             ld      (CAS_HEADER.FileLength+1), a
354   C188
355   C188 C3 8B C1             jp      CAS_RETURN
356   C18B
357   C18B                      ;---------------------------------------------------------------------
358   C18B                      ; Returns from CAS function
359   C18B              CAS_RETURN:
360   C18B E1                   pop hl                                          ; Restore HL
361   C18C B7                   or a                                            ; Set flags according to error code
362   C18D C3 37 0B             jp SYSTEM_FUNCTION_RETURN
363   C190
364   C190
365   C190                      ; *** Other modules ***
366   C190                      include "ramfunctions.a80"
# file opened: ramfunctions.a80
  1+  C190                      ; ****************
  2+  C190                      ; * U0 data area *
  3+  C190                      ; ****************
  4+  C190              RAM_DATA_STORAGE:
  5+  C190                      phase RAM_DATA
  6+  0C05 02           BASIC_VERSION           db      2           ; ROM version information
  7+  0C06 00 00        ROM_RETURN_ADDRESS      dw      0           ; Return address for 2.x ROM
  8+  0C08 00           FILE_IS_OPENED          db      0           ; 1 - file is opened in the ROM filesystem, 0 - no file opened
  9+  0C09 00           CURRENT_PAGE_INDEX      db      0           ; Used page index 0..3
 10+  0C0A 00 00        CURRENT_FILE_LENGTH     dw      0           ; Remaining length of the currently opened file
 11+  0C0C 00 00        CURRENT_FILE_ADDRESS    dw      0           ; Address of the currently opened file
 12+  0C0E 00           CURRENT_CAS_HEADER_POS  db      0           ; Position in CAS header (for CH_IN function)
 13+  0C0F 00           CURRENT_FILE_NAME_LEN   db      0           ; Name length of the currently opened file
 14+  0C10 20 20 20...  CURRENT_FILE_NAME       ds      CART_MAX_FILENAME_LENGTH, ' ' ; Name of the currently opened file
 15+  0C20
 16+  0C20                      ; CAS header struct
 17+  0C20 00 01 00 00  CAS_HEADER  CASHeader
 17+  0C24 FF 00 00 00
 17+  0C28 00 00 00 00
 17+  0C2C...
 17+  0C2F 00
 18+  0C30
 19+  0C30              RAM_DATA_LENGTH equ $-RAM_DATA
 20+  0C30              	dephase
 21+  C1BB
 22+  C1BB                      ; ***********************
 23+  C1BB                      ; * Initialization code *
 24+  C1BB                      ; ***********************
 25+  C1BB
 26+  C1BB                      ;---------------------------------------------------------------------
 27+  C1BB                      ; BASIC initialization and version detection program
 28+  C1BB              BASIC_INITIALIZE_CODE:
 29+  C1BB                      phase RAM_PROGRAM
 30+  0C30
 31+  0C30              BASIC_INITIALIZE:
 32+  0C30                      ; Set memory map to: U0, U1, U2, SYS
 33+  0C30 3E 70        	ld	a, P_U0_U1_U2_SYS
 34+  0C32 32 03 00             ld      (P_SAVE), a
 35+  0C35 D3 02                out     (PAGE_REG), a
 36+  0C37
 37+  0C37              	; determine ROM version (1.x or 2.x)
 38+  0C37 3A 9F F0     	ld 	a, ($f09f)                  ; Check for 1.2 verion number
 39+  0C3A FE 0C        	cp	$0c
 40+  0C3C 20 23        	jr 	nz, BASIC_INITIALIZE_END
 41+  0C3E
 42+  0C3E              	; version is 1.x -> store version
 43+  0C3E 3E 01        	ld	a, 1
 44+  0C40 32 05 0C     	ld	(BASIC_VERSION), a
 45+  0C43
 46+  0C43              	; initialize BASIC storage area
 47+  0C43 21 00 17     	ld	hl, BASIC_STORAGE_AREA
 48+  0C46 E5           	push 	hl
 49+  0C47 DD E1        	pop	ix
 50+  0C49 01 EF 02     	ld	bc, 02efh
 51+  0C4C 11 01 17     	ld	de, 1701h
 52+  0C4F 36 00        	ld	(hl), 0
 53+  0C51 ED B0        	ldir
 54+  0C53
 55+  0C53              	; initialize error handlers
 56+  0C53 21 5B FB     	ld	hl, 0fb5bh
 57+  0C56 11 08 00     	ld 	de, 8
 58+  0C59 01 27 00     	ld	bc, 27h
 59+  0C5C ED B0        	ldir
 60+  0C5E
 61+  0C5E              	; call NEW command
 62+  0C5E CD 10 DE     	call	0de10h
 63+  0C61
 64+  0C61              BASIC_INITIALIZE_END:
 65+  0C61              	; Set memory map to: U0, U1, U2, CART
 66+  0C61 3E 30        	ld	a, P_U0_U1_U2_CART
 67+  0C63 32 03 00             ld      (P_SAVE), a
 68+  0C66 D3 02                out     (PAGE_REG), a
 69+  0C68
 70+  0C68              	; return back to the CART
 71+  0C68 C9           	ret
 72+  0C69
 73+  0C69              BASIC_INITIALIZE_CODE_LENGTH: equ $-RAM_PROGRAM
 74+  0C69                      dephase
 75+  C1F4
 76+  C1F4                      ; *****************
 77+  C1F4                      ; * RAM Functions *
 78+  C1F4                      ; *****************
 79+  C1F4
 80+  C1F4              RAM_FUNCTIONS_CODE:
 81+  C1F4                      phase RAM_PROGRAM
 82+  0C30
 83+  0C30                      ;---------------------------------------------------------------------
 84+  0C30                      ; Copies TVC program file from Cart ROM to RAM
 85+  0C30                      ; Input:  HL - ROM address
 86+  0C30                      ;         DE - RAM address
 87+  0C30                      ;         BC - Number of bytes to copy
 88+  0C30                      ; Output: HL - last byte address of ROM file
 89+  0C30                      ;         DE - last address of the RAM
 90+  0C30                      ; Destroys: HL, BC, DE, A, F
 91+  0C30              COPY_PROGRAM_TO_RAM:
 92+  0C30                      ; Check length
 93+  0C30 78                   ld      a, b
 94+  0C31 B1                   or      a, c
 95+  0C32 C8                   ret     z                               ; Return is length is zero
 96+  0C33
 97+  0C33              	; Set memory map to: U0, U1, U2, CART
 98+  0C33 3E 30        	ld	a, P_U0_U1_U2_CART
 99+  0C35 32 03 00             ld      (P_SAVE), a
100+  0C38 D3 02                out     (PAGE_REG), a
101+  0C3A
102+  0C3A                      ; determine ROM page index
103+  0C3A 7C                   ld      a, h
104+  0C3B CB 3F                srl     a                               ; Divide by 64 (for the page address)
105+  0C3D CB 3F                srl     a
106+  0C3F CB 3F                srl     a
107+  0C41 CB 3F                srl     a
108+  0C43 CB 3F                srl     a
109+  0C45 CB 3F                srl     a
110+  0C47
111+  0C47 32 09 0C             ld      (CURRENT_PAGE_INDEX), a
112+  0C4A
113+  0C4A                      ; set page index
114+  0C4A CD 73 0C             call    CHANGE_ROM_PAGE
115+  0C4D
116+  0C4D                      ; convert ROM address to CART address
117+  0C4D 3E C0                ld      a, high(CART_START_ADDRESS)
118+  0C4F B4                   or      h
119+  0C50 67                   ld      h, a
120+  0C51
121+  0C51              PROGRAM_COPY_LOOP:
122+  0C51 ED A0                ldi                                     ; copy byte
123+  0C53
124+  0C53                      ; check remaining bytes
125+  0C53 E2 6F 0C             jp      po, END_PROGRAM_COPY
126+  0C56
127+  0C56                      ; check for page switch
128+  0C56 7C                   ld      a, h
129+  0C57 FE FF                cp      high(PAGE0_SELECT)
130+  0C59 38 F6                jr      c, PROGRAM_COPY_LOOP
131+  0C5B
132+  0C5B 7D                   ld      a,  l
133+  0C5C FE FC                cp      low(PAGE0_SELECT)
134+  0C5E 38 F1                jr      c, PROGRAM_COPY_LOOP
135+  0C60
136+  0C60                      ; page end reached -> switch page
137+  0C60 3A 09 0C             ld      a, (CURRENT_PAGE_INDEX)
138+  0C63 3C                   inc     a
139+  0C64 32 09 0C             ld      (CURRENT_PAGE_INDEX), a
140+  0C67
141+  0C67 CD 73 0C             call    CHANGE_ROM_PAGE
142+  0C6A
143+  0C6A                      ; update page ROM address
144+  0C6A 21 07 C0             ld      hl, PAGE_DATA_START_ADDRESS
145+  0C6D
146+  0C6D 18 E2                jr      PROGRAM_COPY_LOOP
147+  0C6F
148+  0C6F              END_PROGRAM_COPY:
149+  0C6F 3A FC FF             ld      a, (PAGE0_SELECT)               ; Select PAGE0
150+  0C72 C9                   ret
151+  0C73
152+  0C73                      ;---------------------------------------------------------------------
153+  0C73                      ; Changes ROM page according current page index (CURRENT_PAGE_INDEX) variable
154+  0C73              CHANGE_ROM_PAGE:
155+  0C73 E5                   push    hl                              ; Save ROM address
156+  0C74 3A 09 0C             ld      a, (CURRENT_PAGE_INDEX)
157+  0C77 21 FC FF             ld      hl, PAGE0_SELECT
158+  0C7A B5                   or      l
159+  0C7B 6F                   ld      l, a
160+  0C7C 7E                   ld      a,  (hl)                        ; Change page
161+  0C7D E1                   pop     hl
162+  0C7E
163+  0C7E C9                   ret
164+  0C7F
165+  0C7F                      ;---------------------------------------------------------------------
166+  0C7F                      ; Starts Basic program for 1.x ROM
167+  0C7F              BASIC_RUN:
168+  0C7F                      ; Set memory map to: U0, U1, U2, SYS
169+  0C7F 3E 70        	ld	a, P_U0_U1_U2_SYS
170+  0C81 32 03 00             ld      (P_SAVE), a
171+  0C84 D3 02                out     (PAGE_REG), a
172+  0C86
173+  0C86              	; enable interrupts
174+  0C86 FB           	ei
175+  0C87
176+  0C87              	; execute RUN command
177+  0C87 2A 22 17     	ld	hl, (1722h)
178+  0C8A C3 23 DE     	jp	0de23h
179+  0C8D
180+  0C8D                      ;---------------------------------------------------------------------
181+  0C8D                      ; Passing System Function call to ROM
182+  0C8D              SYSTEM_FUNCTON_PASS:
183+  0C8D 3E 70                ld      a,P_U0_U1_U2_SYS            ; Page in ROM
184+  0C8F 32 03 00             ld      (P_SAVE),a
185+  0C92 D3 02                out     (PAGE_REG),a
186+  0C94
187+  0C94              SYSTEM_FUNCTION_CHAIN_ADDRESS:
188+  0C94 C3 00 00             jp      0                           ; Jump to ROM (address will be updates when code is copied to RAM)
189+  0C97
190+  0C97
191+  0C97              RAM_FUNCTIONS_CODE_LENGTH: equ $-RAM_PROGRAM
192+  0C97              	dephase
193+  C25B
194+  C25B                      ; ************************
195+  C25B                      ; * System function call *
196+  C25B                      ; ************************
197+  C25B
198+  C25B              SYSTEM_FUNCTION_CALLER_CODE:
199+  C25B                      phase SYSTEM_FUNCTION_CALLER
200+  0B23
201+  0B23                      ; *** System function caller
202+  0B23 E3                   ex (sp),hl                          ; Get return address
203+  0B24 7E                   ld a,(hl)                           ; Get function code
204+  0B25 23                   inc hl                              ; Increment return address
205+  0B26 E3                   ex (sp),hl                          ; Store return address
206+  0B27 08                   ex af,af'                           ; Save fuction code to AF'
207+  0B28 F5                   push af                             ; and store original AF' to stack
208+  0B29
209+  0B29 3A 03 00             ld a,(P_SAVE)                       ; Save memory pageing settings
210+  0B2C F5                   push af                             ; to stack
211+  0B2D
212+  0B2D 3E 30                ld A,P_U0_U1_U2_CART                ; Set paging to U0-U1-U2-CART
213+  0B2F 32 03 00             ld (P_SAVE),a
214+  0B32 D3 02                out (PAGE_REG),a
215+  0B34
216+  0B34 C3 A5 C0             jp SYSTEM_FUNCTION                  ; Call New System Function
217+  0B37
218+  0B37              SYSTEM_FUNCTION_RETURN:
219+  0B37 08                   ex af,af'
220+  0B38 F1                   pop af
221+  0B39
222+  0B39 32 03 00             ld (P_SAVE),a                       ; Restore paging
223+  0B3C D3 02                out (PAGE_REG),a
224+  0B3E F1                   pop af
225+  0B3F 08                   ex af,af'
226+  0B40 C9                   ret
227+  0B41
228+  0B41              SYSTEM_FUNCTION_CALLER_CODE_LENGTH equ $-SYSTEM_FUNCTION_CALLER
229+  0B41                      dephase
230+  C279
# file closed: ramfunctions.a80
367   C279
368   C279                      ; *** File system data ***
369   C279 00 00 00 00  FILE_SYSTEM FileSystemStruct
369   C27D 00 00 00 00
# file closed: kilocart.a80

Value    Label
------ - -----------------------------------------------------------
0xC27F X FILE_SYSTEM.FILES_ADDRESS
0xC279 X FILE_SYSTEM
0x0C6F   END_PROGRAM_COPY
0x0C51   PROGRAM_COPY_LOOP
0x0C73   CHANGE_ROM_PAGE
0x0C61   BASIC_INITIALIZE_END
0x0C2F X CAS_HEADER.Version
0x0C25 X CAS_HEADER.Zeros
0x0C24 X CAS_HEADER.Autorun
0x0C21 X CAS_HEADER.FileType
0x0C20 X CAS_HEADER.Zero
0x0C10 X CURRENT_FILE_NAME
0x0C0F X CURRENT_FILE_NAME_LEN
0x0C09   CURRENT_PAGE_INDEX
0x0C08 X FILE_IS_OPENED
0x0B37   SYSTEM_FUNCTION_RETURN
0xC170   CAS_BKIN_WRONG_SIZE
0x0C20   CAS_HEADER
0xC153   CAS_CH_IN_EOF
0xC18B   CAS_RETURN
0x0C0E   CURRENT_CAS_HEADER_POS
0x0C22   CAS_HEADER.FileLength
0x0C0A   CURRENT_FILE_LENGTH
0x0C0C   CURRENT_FILE_ADDRESS
0xC128   CHECK_NEXT_FILE
0xC0F6   COMPARE_FILENAME_CHARACTERS
0xC0F0   COMPARE_FILE_NAMES
0xC0DE   FILENAME_CHECK_ACCENTED_CHARACTERS
0xC0E8   STORE_FILENAME_CHARACTER
0xC0D1   FILENAME_TOUPPER_LOOP
0xC175   CAS_CLOSE_RD
0xC158   CAS_BKIN
0xC138   CAS_CH_IN
0xC0CD   CAS_OPEN
0x0C8D   SYSTEM_FUNCTON_PASS
0xC0AF   NOT_KNOWN_CAS_FUNCTION
0xC0B3   HANDLE_CAS_FUNCTIONS
0xC0A5   SYSTEM_FUNCTION
0xC279   FILE_SYSTEM.FILES1x_COUNT
0xC27B   FILE_SYSTEM.DIRECTORY1x_ADDRESS
0xC27A   FILE_SYSTEM.FILES2x_COUNT
0xC27D   FILE_SYSTEM.DIRECTORY2x_ADDRESS
0xC09A   SET_VERSION1x_FILE_SYSTEM
0x0C7F   BASIC_RUN
0x0C05   BASIC_VERSION
0x0C30   COPY_PROGRAM_TO_RAM
0xC088   GET_FILE_SYSTEM_INFO
0x001E   SYSTEM_FUNCTION_CALLER_CODE_LENGTH
0xC25B   SYSTEM_FUNCTION_CALLER_CODE
0x0C94   SYSTEM_FUNCTION_CHAIN_ADDRESS
0x0067   RAM_FUNCTIONS_CODE_LENGTH
0xC1F4   RAM_FUNCTIONS_CODE
0x0C30   BASIC_INITIALIZE
0x0039   BASIC_INITIALIZE_CODE_LENGTH
0xC1BB   BASIC_INITIALIZE_CODE
0x0C06   ROM_RETURN_ADDRESS
0xC190   RAM_DATA_STORAGE
0xC00C   MAIN
0xC004 X ENTRY
0x000F X CASHeader.Version
0x0005 X CASHeader.Zeros
0x0004 X CASHeader.Autorun
0x0002 X CASHeader.FileLength
0x0001 X CASHeader.FileType
0x0000 X CASHeader.Zero
0x0010   CASHeader
0x0012 X FileSystemEntry.FILE_LENGTH
0x0010   FileSystemEntry.FILE_ADDRESS
0x0000 X FileSystemEntry.FILE_NAME
0x0014   FileSystemEntry
0x0006 X FileSystemStruct.FILES_ADDRESS
0x0004 X FileSystemStruct.DIRECTORY2x_ADDRESS
0x0002 X FileSystemStruct.DIRECTORY1x_ADDRESS
0x0001 X FileSystemStruct.FILES2x_COUNT
0x0000 X FileSystemStruct.FILES1x_COUNT
0x0008 X FileSystemStruct
0x00E5 X CAS_ERR_BLOCK_NUMBER
0x00E6 X CAS_ERR_PROTECTION
0x00E7   CAS_ERR_INTERNAL
0x00E8 X CAS_ERR_VERIFY
0x00E9   CAS_ERR_NO_OPEN_FILE
0x00EA X CAS_ERR_CRC
0x00EB X CAS_ERR_ALREADY_OPENED
0x00EC   CAS_ERR_EOF
0x00D5 X CAS_FN_VERIFY
0x0054 X CAS_FN_CLOSE_WR
0x00D4   CAS_FN_CLOSE_RD
0x0053 X CAS_FN_CRTE
0x00D3   CAS_FN_OPEN
0x0052 X CAS_FN_BKOUT
0x00D2   CAS_FN_BKIN
0x0051 X CAS_FN_CHOUT
0x00D1   CAS_FN_CHIN
0x0001   SW_MINOR_VERSION
0x0000   SW_MAJOR_VERSION
0x0020   P_SYS_U1_U2_CART
0x0030   P_U0_U1_U2_CART
0x0070   P_U0_U1_U2_SYS
0x0002   PAGE_REG
0x000B X CAS_LAST_FUNCTION_CODE
0x0050   CAS_FUNCTION_CLASS
0x0080 X SYSTEM_FUNCTION_DIRECTION_MASK
0x0070   SYSTEM_FUNCTION_CLASS_MASK
0x0011 X BUFFERED_FILE
0x0010   CART_MAX_FILENAME_LENGTH
0xFFFF X PAGE3_SELECT
0xFFFE X PAGE2_SELECT
0xFFFD X PAGE1_SELECT
0xFFFC   PAGE0_SELECT
0x0B35   SYSTEM_FUNCTION_ROM_ENTRY_ADDRESS
0x0B23   SYSTEM_FUNCTION_CALLER
0x0C30   RAM_PROGRAM
0x002B   RAM_DATA_LENGTH
0x0C05   RAM_DATA
0x0B6B   BUFFER
0x0EB6   BASIC_FLAG
0x19EF   BASIC_PROGRAM_START
0x1700   BASIC_STORAGE_AREA
0x0BF3 X FILE_TYPE
0x0003   P_SAVE
0xC007   PAGE_DATA_START_ADDRESS
0xC000   CART_START_ADDRESS
